{"version":3,"file":"static/js/8334.1835cc4a.chunk.js","mappings":"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","sources":["../node_modules/@capacitor/local-notifications/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { PermissionState } from '@capacitor/core';\n\nimport type {\n  EnabledResult,\n  ListChannelsResult,\n  LocalNotificationSchema,\n  LocalNotificationsPlugin,\n  PendingResult,\n  PermissionStatus,\n  ScheduleOptions,\n  ScheduleResult,\n} from './definitions';\n\nexport class LocalNotificationsWeb\n  extends WebPlugin\n  implements LocalNotificationsPlugin\n{\n  protected pending: LocalNotificationSchema[] = [];\n\n  async createChannel(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async deleteChannel(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async listChannels(): Promise<ListChannelsResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async schedule(options: ScheduleOptions): Promise<ScheduleResult> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    for (const notification of options.notifications) {\n      this.sendNotification(notification);\n    }\n\n    return {\n      notifications: options.notifications.map(notification => ({\n        id: notification.id,\n      })),\n    };\n  }\n\n  async getPending(): Promise<PendingResult> {\n    return {\n      notifications: this.pending,\n    };\n  }\n\n  async registerActionTypes(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async cancel(pending: ScheduleResult): Promise<void> {\n    this.pending = this.pending.filter(\n      notification =>\n        !pending.notifications.find(n => n.id === notification.id),\n    );\n  }\n\n  async areEnabled(): Promise<EnabledResult> {\n    const { display } = await this.checkPermissions();\n\n    return {\n      value: display === 'granted',\n    };\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    const display = this.transformNotificationPermission(\n      await Notification.requestPermission(),\n    );\n\n    return { display };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    if (!this.hasNotificationSupport()) {\n      throw this.unavailable('Notifications not supported in this browser.');\n    }\n\n    const display = this.transformNotificationPermission(\n      Notification.permission,\n    );\n\n    return { display };\n  }\n\n  protected hasNotificationSupport = (): boolean => {\n    if (!('Notification' in window) || !Notification.requestPermission) {\n      return false;\n    }\n\n    if (Notification.permission !== 'granted') {\n      // don't test for `new Notification` if permission has already been granted\n      // otherwise this sends a real notification on supported browsers\n      try {\n        new Notification('');\n      } catch (e) {\n        if (e.name == 'TypeError') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  protected transformNotificationPermission(\n    permission: NotificationPermission,\n  ): PermissionState {\n    switch (permission) {\n      case 'granted':\n        return 'granted';\n      case 'denied':\n        return 'denied';\n      default:\n        return 'prompt';\n    }\n  }\n\n  protected sendPending(): void {\n    const toRemove: LocalNotificationSchema[] = [];\n    const now = new Date().getTime();\n\n    for (const notification of this.pending) {\n      if (\n        notification.schedule?.at &&\n        notification.schedule.at.getTime() <= now\n      ) {\n        this.buildNotification(notification);\n        toRemove.push(notification);\n      }\n    }\n\n    this.pending = this.pending.filter(\n      notification => !toRemove.find(n => n === notification),\n    );\n  }\n\n  protected sendNotification(notification: LocalNotificationSchema): void {\n    if (notification.schedule?.at) {\n      const diff = notification.schedule.at.getTime() - new Date().getTime();\n\n      this.pending.push(notification);\n      setTimeout(() => {\n        this.sendPending();\n      }, diff);\n      return;\n    }\n    this.buildNotification(notification);\n  }\n\n  protected buildNotification(\n    notification: LocalNotificationSchema,\n  ): Notification {\n    const localNotification = new Notification(notification.title, {\n      body: notification.body,\n    });\n    localNotification.addEventListener(\n      'click',\n      this.onClick.bind(this, notification),\n      false,\n    );\n    localNotification.addEventListener(\n      'show',\n      this.onShow.bind(this, notification),\n      false,\n    );\n    return localNotification;\n  }\n\n  protected onClick(notification: LocalNotificationSchema): void {\n    const data = {\n      actionId: 'tap',\n      notification,\n    };\n    this.notifyListeners('localNotificationActionPerformed', data);\n  }\n\n  protected onShow(notification: LocalNotificationSchema): void {\n    this.notifyListeners('localNotificationReceived', notification);\n  }\n}\n"],"names":["LocalNotificationsWeb","pending","hasNotificationSupport","window","Notification","requestPermission","permission","e","name","this","unimplemented","options","unavailable","notifications","notification","sendNotification","map","id","filter","find","n","checkPermissions","display","value","transformNotificationPermission","toRemove","now","Date","getTime","schedule","at","buildNotification","push","diff","setTimeout","sendPending","localNotification","title","body","addEventListener","onClick","bind","onShow","data","actionId","notifyListeners"],"sourceRoot":""}